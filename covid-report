#!/usr/bin/env python3

import json
import os
from pathlib import Path
import re
import sys
import urllib.request

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

rx = re.compile("\"[a-zA-Z ,]*\"")


def quoterepl(matchobj):
    s = matchobj.group(0)
    s = s.replace('"', '')
    s = s.replace(',', '')
    return s


def unquote(line):
    if '"' not in line:
        return line
    return re.sub(rx, quoterepl, line)


def load_frame(path):
    
    dataraw = { }
    
    with path.open("r") as f:
        header = f.readline().strip()
        hdrs = header.split(",")
        ts = hdrs[4:]
        
        for line in f:
            line = unquote(line)
            
            fields = line.strip().split(",")
            province = fields[0]  # Province
            country = fields[1]  # Country
            data = np.array(fields[4:], dtype=float)
                        
            label = country
            if len(province) > 0:
                label = f"{country}:{province}"
            
            dataraw[label] = data
            
            if country not in dataraw.keys():
                dataraw[country] = data
            else:
                dataraw[country] += data
    
    return dataraw


def case_threshold(data, threshold=100.0):
    for i, val in enumerate(data):
        if val > threshold:
            return data[i:]
    return np.array()


def moving_average_conv(x, w):
    return np.convolve(x, np.ones(w), 'valid') / w


# This method  preserves the number of samples, but seems
# to create distorsion for the begin and end values
def moving_average(x, w):
    avg = np.zeros(len(x))
    mid = int(w / 2)
    pos = []
    for i in range(w):
        pos.append(i - mid)
    
    end = len(x)
    div = len(pos)
    for i in range(end):
        sum = 0.0
        for j in pos:
            idx = i + j
            if idx < 0:
                idx = 0
            if idx >= end:
                idx = end - 1
            sum += x[idx]
        avg[i] = sum / div
    return avg


def growth_abs(data):
    out = np.zeros(len(data) - 1)
    for i in range(0, len(data) - 1):
        out[i] = data[i + 1] - data[i]
    return out


def growth_rate(data):
    out = np.zeros(len(data))
    
    pos = [-1, 1]
    end = len(data)
    
    for i in range(end):
        if data[i] > 0:
            count = 0
            for j in pos:
                idx = i + j
                if idx >= 0 and idx < len(data):
                    count += 1
                    out[i] += (data[idx] - data[i]) / (data[i])
            out[i] = out[i] / count
    return out


def main():    
    import argparse

    data_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
    default_data_file = Path(Path(data_url).name)

    parser = argparse.ArgumentParser(description='create covid report')
    parser.add_argument('report', default="report.json", help='path to json report file')
    parser.add_argument('datafile', nargs='?', default=None, help='path to data file to use')
    args = parser.parse_args()

    data_file = args.datafile
    
    if data_file is None:
        if default_data_file.exists():
            print("using cached data file...")
            data_file = default_data_file
        else:
            print("downloading latest data...")
            response = urllib.request.urlopen(data_url)
            content = response.read()
            default_data_file.write_text(content.decode())
            data_file = default_data_file
            print("download done")
    
    if data_file is None:
        print("data file not found")
        sys.exit(1)
    
    data_path = Path(data_file)
    df = load_frame(data_path)
    print(f"loaded {len(df.keys())} series")
    
    json_path = Path(args.report)
    report = json.loads(json_path.read_text())
        
    print("writing label file... ")
    labels = list(df.keys())
    labels.sort()
    labels_output = "\n".join(labels)
    Path('labels.txt').write_text(labels_output)
    
    print("generating chart... ")
        
    fig, ax = plt.subplots()
    names = report.get('names', [])
    for name in names:
        print(f"{name}")
        data = df[name]
        data = moving_average_conv(data, 5)
        smooth_data = moving_average_conv(data, 7)
        
        grow_abs_data = growth_abs(data)
        grow_abs_smooth = moving_average_conv(grow_abs_data, 7)
        
        cut = -45
        y = grow_abs_smooth[cut:]
        x = np.array([float(i) for i in range(len(y))])
        print(y)
        ax.plot(x, y, label=name)
    
    ax.set_yscale('log')
    ax.legend()
    fig.savefig('report_growth_abs.png')
    
    fig, ax = plt.subplots()
    for name in names:
        print(f"{name}")
        data = df[name]
        data = moving_average_conv(data, 5)
        grow_rate_data = growth_rate(data)
        grow_rate_smooth = moving_average_conv(grow_rate_data, 7)
        
        x = np.array([float(i) for i in range(len(grow_rate_smooth))])
        
        cut = -45
        x_trim = x[cut:]
        y_trim = grow_rate_smooth[cut:]
        
        ax.plot(x_trim, y_trim, label=name)

    ax.legend()
    ax.set_title(f"Daily covid-19 growth rate according to time")
    fig.savefig('report_growth_rate.png')

    fig, ax = plt.subplots()
    for name in names:
        print(f"{name}")
        data = df[name]
        data = moving_average_conv(data, 15)
        dx = growth_rate(data)
        dx2 = growth_rate(dx)

        print("dx2")
        print(dx2)
        
        x = np.array([float(i) for i in range(len(dx2))])
        
        cut = -45
        x_trim = x[cut:]
        y_trim = dx2[cut:]
        
        ax.plot(x_trim, y_trim, label=name)
        
    ax.legend()
    ax.set_title(f"Second derivative daily covid-19 cases according to time")
    fig.savefig('report_second_derivative.png')
    
    fig, ax = plt.subplots()
    for name in names:
        print(f"{name}")
        cases = df[name]

        cases = moving_average_conv(cases, 5)
        cases = case_threshold(cases, 100)
        rate = growth_abs(cases)
        
        cases = cases[:-1]
        
        print(cases)
        print(rate)
        
        x = np.array([float(i) for i in range(len(cases))])
                
        ax.loglog(cases, rate, label=name)
        
    ax.legend()
    ax.set_title(f"Daily covid-19 growth rate according to number of cases")
    fig.savefig('report_rate_according_to_cases.png')

    
if __name__ == "__main__":    
    main()
